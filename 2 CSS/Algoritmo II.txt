Algoritmo II

Lección

Muestra de código 1 - function y return I

1) function a() {
2)    console.log('hello');
3) }
4) console.log('Dojo');

Console:'Dojo'


Muestra de código 2 - function y return I

1) function a(){
2)   console.log('hello');
3)   return 15;
4) }
5) x = a();
6) console.log('x is', x);

Console:'hello','x is',15


Muestra de código 3 - function y return I

1) function a(n){
2)   console.log('n is', n);
3)   return n+15;
4) }
5) x = a(3);
6) console.log('x is', x);

Console:'n is',3,'x is',18


Muestra de código 4 - function y return I

1) function a(n) {
2)   console.log('n is', n);
3)   y = n*2;
4)   return y;
5) }
6) x = a(3) + a(5);
7) console.log('x is', x);

Console:'n is',3,'n is',5,'x is',16


Muestra de código 5 - orden de las operaciones I

1) function op(a,b) {
2)   c = a+b;
3)   console.log('c is', c);
4)   return c;
5) }
6) x = op(2,3) + op(3,5);
7) console.log('x is', x);

Console:'c is',5,'c is',8,'x is',13


Muestra de código 6 - orden de las operaciones I

1) function op(a,b) {
2)   c = a+b;
3)   console.log('c is', c);
4)   return c;
5) }
6) x = op(2,3) + op(3,op(2,1)) + op(op(2,1), op(2,3));
7) console.log('x is', x)

Console:'c is',5,'c is',3,'c is',6,'c is',3,'c is',5,'c is',8,'x is',19


Muestra de código 7 - scoping

1) var x = 15;
2) function a() {
3)   var x = 10;
4) }
5) console.log(x);
6) a();
7) console.log(x);

Console:15,15


Actividad

1)
function multiply(x,y) {
    console.log(x);
    console.log(y);
}
b = multiply(2,3);
console.log(b);

Console:2,3,undefined

TDiagram function multiply
x is 2
x is 3

TDiagram principal
b is undefined (la función no retorna valor)


2)
function multiply(x,y) {
    return x*y;
}
b = multiply(2,3);
console.log(b);
console.log(multiply(5,2));

Console:6,10

TDiagram
b is 6

TDiagram multiply(2,3)
x is 2
y is 3

TDiagram multiply(5,2)
x is 5
y is 2


3)
var x = [1,2,3,4,5,10];
for(var i=0; i<5; i++) {
   i = i + 3; 
   console.log(i);
}

Console:3,7

TDiagram
x is [1,2,3,4,5,10]
i is 0->3->4->7->8


4)
var x=15;
console.log(x);
function awesome(){
    var x=10;
    console.log(x);
}
console.log(x);
awesome();
console.log(x);

Console:15,15,10,15

TDiagram
x is 15

TDiagram awesom()
x is 10


5)
for(var i=0; i<15; i+=2) {
   console.log(i);
}

Console:0,2,4,6,8,10,12,14

TDiagram
i is 0->2->4->6->8->10->12->14->16


6)
for(var i=0; i<3; i++) {
   for(var j=0; j<2; j++) {      
       console.log(i*j);
   }
}

Console:0,0,0,1,0,2

TDiagram
i is 0      ->1      ->2      ->3
j is 0->1->2->0->1->2->0->1->2


7)
function looping(x,y) {
   for(var i=0; i<x; i++) {
      for(var j=0; j<x; j++) {      
          console.log(i*j);
      } 
   }
}
z = looping(3,3);
console.log(z);

Console:0,0,0,0,1,2,0,2,4, undefined

TDiagram
z is undefined (la función no retorna valor)

TDiagram looping(3,3)
x is 3
y is 3
i is 0         ->1         ->2         ->3
j is 0->1->2->3->0->1->2->3->0->1->2->3


8)
function looping(x,y) {
   for(var i=0; i<x; i++) {    
      for(var j=0; j<y; j++) {      
         console.log(i*j);
      } 
   }
   return x*y;
}
z = looping(3,5);
console.log(z);

Console:0,0,0,0,0,0,1,2,3,4,0,2,4,6,8,15

TDiagram
z is 15

TDiagram looping(3,5)
x is 3
y is 5
i is 0               ->1               ->2            ->3
j is 0->1->2->3->4->5->0->1->2->3->4->5->0->1->3->4->5


Parte 2

1) Print 1 to x
Por favor, completa los siguientes códigos para que la función imprima (print) todos los enteros (integers) de 1 a x. 
Si x es negativo, haz que se muestre (print/log) “número negativo” y que la función devuelva falso.

function printUpTo(x) {
  if (x>0){
    for(var i=1;i<=x;i++){
      console.log(i);
    }
  }
  else {
    console.log("número negativo");
    return false;
  }
}
printUpTo(1000); // debería imprimir todos los enteros de 1 to 1000
y = printUpTo(-10); // error(debería imprimir false) imprime "número negativo"
console.log(y); // debería imprimir false


2) PrintSum
Completa el código de más abajo para que la función imprima enteros (integers) de 0 a x y donde cada entero imprima la suma (sum) parcial. 
Haz que la función entregue la suma final.

function printSum(x) {
  var sum = 0;
  for (var i=0;i<=x;i++){
    sum=sum+i;
    console.log(i);
    console.log(sum);
  }
  return sum
}
y = printSum(255) // debería imprimir todos los enteros de 0 a 255 y que cada entero imprima la suma parcial.
console.log(y) // // debería imprimir 32640


3) PrintSumArray
Completa el código a continuación para que la función entregue la suma de todos los valores en un array dado.

function printSumArray(x) {
  var sum = 0;
  for(var i=0; i<x.length; i++) {
    sum=sum+x[i];
  }
  return sum;
}
console.log( printSumArray([1,2,3]) ); // debería imprimir 6


4) Bonus: LargestElement
Crea una función que entregue el elemento más grande (largest element) en un array. 
Por ejemplo largestElement([1,30,5,7]) debiera dar como resultado 30.

function LargestElement(x) {
  var mayor=x[0]
  for (var i=0;i<x.length;i++){
    if(mayor<x[i]){
       mayor=x[i];
    }
  }
  return mayor;
}
console.log(LargestElement([1,30,5,7]));

















